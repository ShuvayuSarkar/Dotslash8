// This is your Prisma schema file
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    age           Int?
    gender        String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    diagnoses     Diagnosis[]
    subscriptions Subscription[]
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Diagnosis {
    id            String   @id @default(cuid())
    userId        String
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    diagnosis     String
    comment       String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    subscriptionId String
    subscription  Subscription @relation(fields: [subscriptionId], references: [id])

    @@index([userId])
    @@index([subscriptionId])
}

model Subscription {
    id           String     @id @default(cuid())
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    startDate    DateTime   @default(now())
    endDate      DateTime
    isActive     Boolean    @default(true)
    paymentId    String     
    orderId      String     @unique
    diagnoses    Diagnosis[]
    requestsUsed Int        @default(0)
    maxRequests  Int        @default(4)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@index([userId])
}